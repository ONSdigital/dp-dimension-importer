// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package storertest

import (
	"context"
	"github.com/ONSdigital/dp-dimension-importer/store"
	"github.com/ONSdigital/dp-graph/v2/models"
	"github.com/ONSdigital/dp-healthcheck/healthcheck"
	"sync"
)

var (
	lockStorerMockAddDimensions            sync.RWMutex
	lockStorerMockChecker                  sync.RWMutex
	lockStorerMockClose                    sync.RWMutex
	lockStorerMockCreateCodeRelationship   sync.RWMutex
	lockStorerMockCreateInstance           sync.RWMutex
	lockStorerMockCreateInstanceConstraint sync.RWMutex
	lockStorerMockErrorChan                sync.RWMutex
	lockStorerMockGetCodeOrder             sync.RWMutex
	lockStorerMockInsertDimension          sync.RWMutex
	lockStorerMockInstanceExists           sync.RWMutex
)

// Ensure, that StorerMock does implement store.Storer.
// If this is not the case, regenerate this file with moq.
var _ store.Storer = &StorerMock{}

// StorerMock is a mock implementation of store.Storer.
//
//     func TestSomethingThatUsesStorer(t *testing.T) {
//
//         // make and configure a mocked store.Storer
//         mockedStorer := &StorerMock{
//             AddDimensionsFunc: func(ctx context.Context, instanceID string, dimensions []interface{}) error {
// 	               panic("mock out the AddDimensions method")
//             },
//             CheckerFunc: func(ctx context.Context, state *healthcheck.CheckState) error {
// 	               panic("mock out the Checker method")
//             },
//             CloseFunc: func(ctx context.Context) error {
// 	               panic("mock out the Close method")
//             },
//             CreateCodeRelationshipFunc: func(ctx context.Context, instanceID string, codeListID string, code string) error {
// 	               panic("mock out the CreateCodeRelationship method")
//             },
//             CreateInstanceFunc: func(ctx context.Context, instanceID string, csvHeaders []string) error {
// 	               panic("mock out the CreateInstance method")
//             },
//             CreateInstanceConstraintFunc: func(ctx context.Context, instanceID string) error {
// 	               panic("mock out the CreateInstanceConstraint method")
//             },
//             ErrorChanFunc: func() chan error {
// 	               panic("mock out the ErrorChan method")
//             },
//             GetCodeOrderFunc: func(ctx context.Context, codeListID string, codeLabel string) (*int, error) {
// 	               panic("mock out the GetCodeOrder method")
//             },
//             InsertDimensionFunc: func(ctx context.Context, cache map[string]string, instanceID string, dimension *models.Dimension) (*models.Dimension, error) {
// 	               panic("mock out the InsertDimension method")
//             },
//             InstanceExistsFunc: func(ctx context.Context, instanceID string) (bool, error) {
// 	               panic("mock out the InstanceExists method")
//             },
//         }
//
//         // use mockedStorer in code that requires store.Storer
//         // and then make assertions.
//
//     }
type StorerMock struct {
	// AddDimensionsFunc mocks the AddDimensions method.
	AddDimensionsFunc func(ctx context.Context, instanceID string, dimensions []interface{}) error

	// CheckerFunc mocks the Checker method.
	CheckerFunc func(ctx context.Context, state *healthcheck.CheckState) error

	// CloseFunc mocks the Close method.
	CloseFunc func(ctx context.Context) error

	// CreateCodeRelationshipFunc mocks the CreateCodeRelationship method.
	CreateCodeRelationshipFunc func(ctx context.Context, instanceID string, codeListID string, code string) error

	// CreateInstanceFunc mocks the CreateInstance method.
	CreateInstanceFunc func(ctx context.Context, instanceID string, csvHeaders []string) error

	// CreateInstanceConstraintFunc mocks the CreateInstanceConstraint method.
	CreateInstanceConstraintFunc func(ctx context.Context, instanceID string) error

	// ErrorChanFunc mocks the ErrorChan method.
	ErrorChanFunc func() chan error

	// GetCodeOrderFunc mocks the GetCodeOrder method.
	GetCodeOrderFunc func(ctx context.Context, codeListID string, codeLabel string) (*int, error)

	// InsertDimensionFunc mocks the InsertDimension method.
	InsertDimensionFunc func(ctx context.Context, cache map[string]string, instanceID string, dimension *models.Dimension) (*models.Dimension, error)

	// InstanceExistsFunc mocks the InstanceExists method.
	InstanceExistsFunc func(ctx context.Context, instanceID string) (bool, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddDimensions holds details about calls to the AddDimensions method.
		AddDimensions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// InstanceID is the instanceID argument value.
			InstanceID string
			// Dimensions is the dimensions argument value.
			Dimensions []interface{}
		}
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// State is the state argument value.
			State *healthcheck.CheckState
		}
		// Close holds details about calls to the Close method.
		Close []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// CreateCodeRelationship holds details about calls to the CreateCodeRelationship method.
		CreateCodeRelationship []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// InstanceID is the instanceID argument value.
			InstanceID string
			// CodeListID is the codeListID argument value.
			CodeListID string
			// Code is the code argument value.
			Code string
		}
		// CreateInstance holds details about calls to the CreateInstance method.
		CreateInstance []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// InstanceID is the instanceID argument value.
			InstanceID string
			// CsvHeaders is the csvHeaders argument value.
			CsvHeaders []string
		}
		// CreateInstanceConstraint holds details about calls to the CreateInstanceConstraint method.
		CreateInstanceConstraint []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// InstanceID is the instanceID argument value.
			InstanceID string
		}
		// ErrorChan holds details about calls to the ErrorChan method.
		ErrorChan []struct {
		}
		// GetCodeOrder holds details about calls to the GetCodeOrder method.
		GetCodeOrder []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CodeListID is the codeListID argument value.
			CodeListID string
			// CodeLabel is the codeLabel argument value.
			CodeLabel string
		}
		// InsertDimension holds details about calls to the InsertDimension method.
		InsertDimension []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cache is the cache argument value.
			Cache map[string]string
			// InstanceID is the instanceID argument value.
			InstanceID string
			// Dimension is the dimension argument value.
			Dimension *models.Dimension
		}
		// InstanceExists holds details about calls to the InstanceExists method.
		InstanceExists []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// InstanceID is the instanceID argument value.
			InstanceID string
		}
	}
}

// AddDimensions calls AddDimensionsFunc.
func (mock *StorerMock) AddDimensions(ctx context.Context, instanceID string, dimensions []interface{}) error {
	if mock.AddDimensionsFunc == nil {
		panic("StorerMock.AddDimensionsFunc: method is nil but Storer.AddDimensions was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		InstanceID string
		Dimensions []interface{}
	}{
		Ctx:        ctx,
		InstanceID: instanceID,
		Dimensions: dimensions,
	}
	lockStorerMockAddDimensions.Lock()
	mock.calls.AddDimensions = append(mock.calls.AddDimensions, callInfo)
	lockStorerMockAddDimensions.Unlock()
	return mock.AddDimensionsFunc(ctx, instanceID, dimensions)
}

// AddDimensionsCalls gets all the calls that were made to AddDimensions.
// Check the length with:
//     len(mockedStorer.AddDimensionsCalls())
func (mock *StorerMock) AddDimensionsCalls() []struct {
	Ctx        context.Context
	InstanceID string
	Dimensions []interface{}
} {
	var calls []struct {
		Ctx        context.Context
		InstanceID string
		Dimensions []interface{}
	}
	lockStorerMockAddDimensions.RLock()
	calls = mock.calls.AddDimensions
	lockStorerMockAddDimensions.RUnlock()
	return calls
}

// Checker calls CheckerFunc.
func (mock *StorerMock) Checker(ctx context.Context, state *healthcheck.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("StorerMock.CheckerFunc: method is nil but Storer.Checker was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		State *healthcheck.CheckState
	}{
		Ctx:   ctx,
		State: state,
	}
	lockStorerMockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	lockStorerMockChecker.Unlock()
	return mock.CheckerFunc(ctx, state)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//     len(mockedStorer.CheckerCalls())
func (mock *StorerMock) CheckerCalls() []struct {
	Ctx   context.Context
	State *healthcheck.CheckState
} {
	var calls []struct {
		Ctx   context.Context
		State *healthcheck.CheckState
	}
	lockStorerMockChecker.RLock()
	calls = mock.calls.Checker
	lockStorerMockChecker.RUnlock()
	return calls
}

// Close calls CloseFunc.
func (mock *StorerMock) Close(ctx context.Context) error {
	if mock.CloseFunc == nil {
		panic("StorerMock.CloseFunc: method is nil but Storer.Close was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockStorerMockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	lockStorerMockClose.Unlock()
	return mock.CloseFunc(ctx)
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//     len(mockedStorer.CloseCalls())
func (mock *StorerMock) CloseCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockStorerMockClose.RLock()
	calls = mock.calls.Close
	lockStorerMockClose.RUnlock()
	return calls
}

// CreateCodeRelationship calls CreateCodeRelationshipFunc.
func (mock *StorerMock) CreateCodeRelationship(ctx context.Context, instanceID string, codeListID string, code string) error {
	if mock.CreateCodeRelationshipFunc == nil {
		panic("StorerMock.CreateCodeRelationshipFunc: method is nil but Storer.CreateCodeRelationship was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		InstanceID string
		CodeListID string
		Code       string
	}{
		Ctx:        ctx,
		InstanceID: instanceID,
		CodeListID: codeListID,
		Code:       code,
	}
	lockStorerMockCreateCodeRelationship.Lock()
	mock.calls.CreateCodeRelationship = append(mock.calls.CreateCodeRelationship, callInfo)
	lockStorerMockCreateCodeRelationship.Unlock()
	return mock.CreateCodeRelationshipFunc(ctx, instanceID, codeListID, code)
}

// CreateCodeRelationshipCalls gets all the calls that were made to CreateCodeRelationship.
// Check the length with:
//     len(mockedStorer.CreateCodeRelationshipCalls())
func (mock *StorerMock) CreateCodeRelationshipCalls() []struct {
	Ctx        context.Context
	InstanceID string
	CodeListID string
	Code       string
} {
	var calls []struct {
		Ctx        context.Context
		InstanceID string
		CodeListID string
		Code       string
	}
	lockStorerMockCreateCodeRelationship.RLock()
	calls = mock.calls.CreateCodeRelationship
	lockStorerMockCreateCodeRelationship.RUnlock()
	return calls
}

// CreateInstance calls CreateInstanceFunc.
func (mock *StorerMock) CreateInstance(ctx context.Context, instanceID string, csvHeaders []string) error {
	if mock.CreateInstanceFunc == nil {
		panic("StorerMock.CreateInstanceFunc: method is nil but Storer.CreateInstance was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		InstanceID string
		CsvHeaders []string
	}{
		Ctx:        ctx,
		InstanceID: instanceID,
		CsvHeaders: csvHeaders,
	}
	lockStorerMockCreateInstance.Lock()
	mock.calls.CreateInstance = append(mock.calls.CreateInstance, callInfo)
	lockStorerMockCreateInstance.Unlock()
	return mock.CreateInstanceFunc(ctx, instanceID, csvHeaders)
}

// CreateInstanceCalls gets all the calls that were made to CreateInstance.
// Check the length with:
//     len(mockedStorer.CreateInstanceCalls())
func (mock *StorerMock) CreateInstanceCalls() []struct {
	Ctx        context.Context
	InstanceID string
	CsvHeaders []string
} {
	var calls []struct {
		Ctx        context.Context
		InstanceID string
		CsvHeaders []string
	}
	lockStorerMockCreateInstance.RLock()
	calls = mock.calls.CreateInstance
	lockStorerMockCreateInstance.RUnlock()
	return calls
}

// CreateInstanceConstraint calls CreateInstanceConstraintFunc.
func (mock *StorerMock) CreateInstanceConstraint(ctx context.Context, instanceID string) error {
	if mock.CreateInstanceConstraintFunc == nil {
		panic("StorerMock.CreateInstanceConstraintFunc: method is nil but Storer.CreateInstanceConstraint was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		InstanceID string
	}{
		Ctx:        ctx,
		InstanceID: instanceID,
	}
	lockStorerMockCreateInstanceConstraint.Lock()
	mock.calls.CreateInstanceConstraint = append(mock.calls.CreateInstanceConstraint, callInfo)
	lockStorerMockCreateInstanceConstraint.Unlock()
	return mock.CreateInstanceConstraintFunc(ctx, instanceID)
}

// CreateInstanceConstraintCalls gets all the calls that were made to CreateInstanceConstraint.
// Check the length with:
//     len(mockedStorer.CreateInstanceConstraintCalls())
func (mock *StorerMock) CreateInstanceConstraintCalls() []struct {
	Ctx        context.Context
	InstanceID string
} {
	var calls []struct {
		Ctx        context.Context
		InstanceID string
	}
	lockStorerMockCreateInstanceConstraint.RLock()
	calls = mock.calls.CreateInstanceConstraint
	lockStorerMockCreateInstanceConstraint.RUnlock()
	return calls
}

// ErrorChan calls ErrorChanFunc.
func (mock *StorerMock) ErrorChan() chan error {
	if mock.ErrorChanFunc == nil {
		panic("StorerMock.ErrorChanFunc: method is nil but Storer.ErrorChan was just called")
	}
	callInfo := struct {
	}{}
	lockStorerMockErrorChan.Lock()
	mock.calls.ErrorChan = append(mock.calls.ErrorChan, callInfo)
	lockStorerMockErrorChan.Unlock()
	return mock.ErrorChanFunc()
}

// ErrorChanCalls gets all the calls that were made to ErrorChan.
// Check the length with:
//     len(mockedStorer.ErrorChanCalls())
func (mock *StorerMock) ErrorChanCalls() []struct {
} {
	var calls []struct {
	}
	lockStorerMockErrorChan.RLock()
	calls = mock.calls.ErrorChan
	lockStorerMockErrorChan.RUnlock()
	return calls
}

// GetCodeOrder calls GetCodeOrderFunc.
func (mock *StorerMock) GetCodeOrder(ctx context.Context, codeListID string, codeLabel string) (*int, error) {
	if mock.GetCodeOrderFunc == nil {
		panic("StorerMock.GetCodeOrderFunc: method is nil but Storer.GetCodeOrder was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		CodeListID string
		CodeLabel  string
	}{
		Ctx:        ctx,
		CodeListID: codeListID,
		CodeLabel:  codeLabel,
	}
	lockStorerMockGetCodeOrder.Lock()
	mock.calls.GetCodeOrder = append(mock.calls.GetCodeOrder, callInfo)
	lockStorerMockGetCodeOrder.Unlock()
	return mock.GetCodeOrderFunc(ctx, codeListID, codeLabel)
}

// GetCodeOrderCalls gets all the calls that were made to GetCodeOrder.
// Check the length with:
//     len(mockedStorer.GetCodeOrderCalls())
func (mock *StorerMock) GetCodeOrderCalls() []struct {
	Ctx        context.Context
	CodeListID string
	CodeLabel  string
} {
	var calls []struct {
		Ctx        context.Context
		CodeListID string
		CodeLabel  string
	}
	lockStorerMockGetCodeOrder.RLock()
	calls = mock.calls.GetCodeOrder
	lockStorerMockGetCodeOrder.RUnlock()
	return calls
}

// InsertDimension calls InsertDimensionFunc.
func (mock *StorerMock) InsertDimension(ctx context.Context, cache map[string]string, instanceID string, dimension *models.Dimension) (*models.Dimension, error) {
	if mock.InsertDimensionFunc == nil {
		panic("StorerMock.InsertDimensionFunc: method is nil but Storer.InsertDimension was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Cache      map[string]string
		InstanceID string
		Dimension  *models.Dimension
	}{
		Ctx:        ctx,
		Cache:      cache,
		InstanceID: instanceID,
		Dimension:  dimension,
	}
	lockStorerMockInsertDimension.Lock()
	mock.calls.InsertDimension = append(mock.calls.InsertDimension, callInfo)
	lockStorerMockInsertDimension.Unlock()
	return mock.InsertDimensionFunc(ctx, cache, instanceID, dimension)
}

// InsertDimensionCalls gets all the calls that were made to InsertDimension.
// Check the length with:
//     len(mockedStorer.InsertDimensionCalls())
func (mock *StorerMock) InsertDimensionCalls() []struct {
	Ctx        context.Context
	Cache      map[string]string
	InstanceID string
	Dimension  *models.Dimension
} {
	var calls []struct {
		Ctx        context.Context
		Cache      map[string]string
		InstanceID string
		Dimension  *models.Dimension
	}
	lockStorerMockInsertDimension.RLock()
	calls = mock.calls.InsertDimension
	lockStorerMockInsertDimension.RUnlock()
	return calls
}

// InstanceExists calls InstanceExistsFunc.
func (mock *StorerMock) InstanceExists(ctx context.Context, instanceID string) (bool, error) {
	if mock.InstanceExistsFunc == nil {
		panic("StorerMock.InstanceExistsFunc: method is nil but Storer.InstanceExists was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		InstanceID string
	}{
		Ctx:        ctx,
		InstanceID: instanceID,
	}
	lockStorerMockInstanceExists.Lock()
	mock.calls.InstanceExists = append(mock.calls.InstanceExists, callInfo)
	lockStorerMockInstanceExists.Unlock()
	return mock.InstanceExistsFunc(ctx, instanceID)
}

// InstanceExistsCalls gets all the calls that were made to InstanceExists.
// Check the length with:
//     len(mockedStorer.InstanceExistsCalls())
func (mock *StorerMock) InstanceExistsCalls() []struct {
	Ctx        context.Context
	InstanceID string
} {
	var calls []struct {
		Ctx        context.Context
		InstanceID string
	}
	lockStorerMockInstanceExists.RLock()
	calls = mock.calls.InstanceExists
	lockStorerMockInstanceExists.RUnlock()
	return calls
}
