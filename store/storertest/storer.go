// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package storertest

import (
	"context"
	"github.com/ONSdigital/dp-dimension-importer/model"
	"sync"
)

var (
	lockStorerMockAddDimensions               sync.RWMutex
	lockStorerMockAddVersionDetailsToInstance sync.RWMutex
	lockStorerMockClose                       sync.RWMutex
	lockStorerMockCountInsertedObservations   sync.RWMutex
	lockStorerMockCreateCodeRelationship      sync.RWMutex
	lockStorerMockCreateInstance              sync.RWMutex
	lockStorerMockCreateInstanceConstraint    sync.RWMutex
	lockStorerMockInsertDimension             sync.RWMutex
	lockStorerMockInstanceExists              sync.RWMutex
	lockStorerMockSetInstanceIsPublished      sync.RWMutex
)

// StorerMock is a mock implementation of Storer.
//
//     func TestSomethingThatUsesStorer(t *testing.T) {
//
//         // make and configure a mocked Storer
//         mockedStorer := &StorerMock{
//             AddDimensionsFunc: func(ctx context.Context, instance *model.Instance) error {
// 	               panic("TODO: mock out the AddDimensions method")
//             },
//             AddVersionDetailsToInstanceFunc: func(ctx context.Context, instanceID string, datasetID string, edition string, version int) error {
// 	               panic("TODO: mock out the AddVersionDetailsToInstance method")
//             },
//             CloseFunc: func(ctx context.Context) error {
// 	               panic("TODO: mock out the Close method")
//             },
//             CountInsertedObservationsFunc: func(ctx context.Context, instanceID string) (int64, error) {
// 	               panic("TODO: mock out the CountInsertedObservations method")
//             },
//             CreateCodeRelationshipFunc: func(ctx context.Context, instance *model.Instance, codeListID string, code string) error {
// 	               panic("TODO: mock out the CreateCodeRelationship method")
//             },
//             CreateInstanceFunc: func(ctx context.Context, instance *model.Instance) error {
// 	               panic("TODO: mock out the CreateInstance method")
//             },
//             CreateInstanceConstraintFunc: func(ctx context.Context, instance *model.Instance) error {
// 	               panic("TODO: mock out the CreateInstanceConstraint method")
//             },
//             InsertDimensionFunc: func(ctx context.Context, cache map[string]string, instance *model.Instance, dimension *model.Dimension) (*model.Dimension, error) {
// 	               panic("TODO: mock out the InsertDimension method")
//             },
//             InstanceExistsFunc: func(ctx context.Context, instance *model.Instance) (bool, error) {
// 	               panic("TODO: mock out the InstanceExists method")
//             },
//             SetInstanceIsPublishedFunc: func(ctx context.Context, instanceID string) error {
// 	               panic("TODO: mock out the SetInstanceIsPublished method")
//             },
//         }
//
//         // TODO: use mockedStorer in code that requires Storer
//         //       and then make assertions.
//
//     }
type StorerMock struct {
	// AddDimensionsFunc mocks the AddDimensions method.
	AddDimensionsFunc func(ctx context.Context, instance *model.Instance) error

	// AddVersionDetailsToInstanceFunc mocks the AddVersionDetailsToInstance method.
	AddVersionDetailsToInstanceFunc func(ctx context.Context, instanceID string, datasetID string, edition string, version int) error

	// CloseFunc mocks the Close method.
	CloseFunc func(ctx context.Context) error

	// CountInsertedObservationsFunc mocks the CountInsertedObservations method.
	CountInsertedObservationsFunc func(ctx context.Context, instanceID string) (int64, error)

	// CreateCodeRelationshipFunc mocks the CreateCodeRelationship method.
	CreateCodeRelationshipFunc func(ctx context.Context, instance *model.Instance, codeListID string, code string) error

	// CreateInstanceFunc mocks the CreateInstance method.
	CreateInstanceFunc func(ctx context.Context, instance *model.Instance) error

	// CreateInstanceConstraintFunc mocks the CreateInstanceConstraint method.
	CreateInstanceConstraintFunc func(ctx context.Context, instance *model.Instance) error

	// InsertDimensionFunc mocks the InsertDimension method.
	InsertDimensionFunc func(ctx context.Context, cache map[string]string, instance *model.Instance, dimension *model.Dimension) (*model.Dimension, error)

	// InstanceExistsFunc mocks the InstanceExists method.
	InstanceExistsFunc func(ctx context.Context, instance *model.Instance) (bool, error)

	// SetInstanceIsPublishedFunc mocks the SetInstanceIsPublished method.
	SetInstanceIsPublishedFunc func(ctx context.Context, instanceID string) error

	// calls tracks calls to the methods.
	calls struct {
		// AddDimensions holds details about calls to the AddDimensions method.
		AddDimensions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Instance is the instance argument value.
			Instance *model.Instance
		}
		// AddVersionDetailsToInstance holds details about calls to the AddVersionDetailsToInstance method.
		AddVersionDetailsToInstance []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// InstanceID is the instanceID argument value.
			InstanceID string
			// DatasetID is the datasetID argument value.
			DatasetID string
			// Edition is the edition argument value.
			Edition string
			// Version is the version argument value.
			Version int
		}
		// Close holds details about calls to the Close method.
		Close []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// CountInsertedObservations holds details about calls to the CountInsertedObservations method.
		CountInsertedObservations []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// InstanceID is the instanceID argument value.
			InstanceID string
		}
		// CreateCodeRelationship holds details about calls to the CreateCodeRelationship method.
		CreateCodeRelationship []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Instance is the instance argument value.
			Instance *model.Instance
			// CodeListID is the codeListID argument value.
			CodeListID string
			// Code is the code argument value.
			Code string
		}
		// CreateInstance holds details about calls to the CreateInstance method.
		CreateInstance []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Instance is the instance argument value.
			Instance *model.Instance
		}
		// CreateInstanceConstraint holds details about calls to the CreateInstanceConstraint method.
		CreateInstanceConstraint []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Instance is the instance argument value.
			Instance *model.Instance
		}
		// InsertDimension holds details about calls to the InsertDimension method.
		InsertDimension []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cache is the cache argument value.
			Cache map[string]string
			// Instance is the instance argument value.
			Instance *model.Instance
			// Dimension is the dimension argument value.
			Dimension *model.Dimension
		}
		// InstanceExists holds details about calls to the InstanceExists method.
		InstanceExists []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Instance is the instance argument value.
			Instance *model.Instance
		}
		// SetInstanceIsPublished holds details about calls to the SetInstanceIsPublished method.
		SetInstanceIsPublished []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// InstanceID is the instanceID argument value.
			InstanceID string
		}
	}
}

// AddDimensions calls AddDimensionsFunc.
func (mock *StorerMock) AddDimensions(ctx context.Context, instance *model.Instance) error {
	if mock.AddDimensionsFunc == nil {
		panic("StorerMock.AddDimensionsFunc: method is nil but Storer.AddDimensions was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Instance *model.Instance
	}{
		Ctx:      ctx,
		Instance: instance,
	}
	lockStorerMockAddDimensions.Lock()
	mock.calls.AddDimensions = append(mock.calls.AddDimensions, callInfo)
	lockStorerMockAddDimensions.Unlock()
	return mock.AddDimensionsFunc(ctx, instance)
}

// AddDimensionsCalls gets all the calls that were made to AddDimensions.
// Check the length with:
//     len(mockedStorer.AddDimensionsCalls())
func (mock *StorerMock) AddDimensionsCalls() []struct {
	Ctx      context.Context
	Instance *model.Instance
} {
	var calls []struct {
		Ctx      context.Context
		Instance *model.Instance
	}
	lockStorerMockAddDimensions.RLock()
	calls = mock.calls.AddDimensions
	lockStorerMockAddDimensions.RUnlock()
	return calls
}

// AddVersionDetailsToInstance calls AddVersionDetailsToInstanceFunc.
func (mock *StorerMock) AddVersionDetailsToInstance(ctx context.Context, instanceID string, datasetID string, edition string, version int) error {
	if mock.AddVersionDetailsToInstanceFunc == nil {
		panic("StorerMock.AddVersionDetailsToInstanceFunc: method is nil but Storer.AddVersionDetailsToInstance was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		InstanceID string
		DatasetID  string
		Edition    string
		Version    int
	}{
		Ctx:        ctx,
		InstanceID: instanceID,
		DatasetID:  datasetID,
		Edition:    edition,
		Version:    version,
	}
	lockStorerMockAddVersionDetailsToInstance.Lock()
	mock.calls.AddVersionDetailsToInstance = append(mock.calls.AddVersionDetailsToInstance, callInfo)
	lockStorerMockAddVersionDetailsToInstance.Unlock()
	return mock.AddVersionDetailsToInstanceFunc(ctx, instanceID, datasetID, edition, version)
}

// AddVersionDetailsToInstanceCalls gets all the calls that were made to AddVersionDetailsToInstance.
// Check the length with:
//     len(mockedStorer.AddVersionDetailsToInstanceCalls())
func (mock *StorerMock) AddVersionDetailsToInstanceCalls() []struct {
	Ctx        context.Context
	InstanceID string
	DatasetID  string
	Edition    string
	Version    int
} {
	var calls []struct {
		Ctx        context.Context
		InstanceID string
		DatasetID  string
		Edition    string
		Version    int
	}
	lockStorerMockAddVersionDetailsToInstance.RLock()
	calls = mock.calls.AddVersionDetailsToInstance
	lockStorerMockAddVersionDetailsToInstance.RUnlock()
	return calls
}

// Close calls CloseFunc.
func (mock *StorerMock) Close(ctx context.Context) error {
	if mock.CloseFunc == nil {
		panic("StorerMock.CloseFunc: method is nil but Storer.Close was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockStorerMockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	lockStorerMockClose.Unlock()
	return mock.CloseFunc(ctx)
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//     len(mockedStorer.CloseCalls())
func (mock *StorerMock) CloseCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockStorerMockClose.RLock()
	calls = mock.calls.Close
	lockStorerMockClose.RUnlock()
	return calls
}

// CountInsertedObservations calls CountInsertedObservationsFunc.
func (mock *StorerMock) CountInsertedObservations(ctx context.Context, instanceID string) (int64, error) {
	if mock.CountInsertedObservationsFunc == nil {
		panic("StorerMock.CountInsertedObservationsFunc: method is nil but Storer.CountInsertedObservations was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		InstanceID string
	}{
		Ctx:        ctx,
		InstanceID: instanceID,
	}
	lockStorerMockCountInsertedObservations.Lock()
	mock.calls.CountInsertedObservations = append(mock.calls.CountInsertedObservations, callInfo)
	lockStorerMockCountInsertedObservations.Unlock()
	return mock.CountInsertedObservationsFunc(ctx, instanceID)
}

// CountInsertedObservationsCalls gets all the calls that were made to CountInsertedObservations.
// Check the length with:
//     len(mockedStorer.CountInsertedObservationsCalls())
func (mock *StorerMock) CountInsertedObservationsCalls() []struct {
	Ctx        context.Context
	InstanceID string
} {
	var calls []struct {
		Ctx        context.Context
		InstanceID string
	}
	lockStorerMockCountInsertedObservations.RLock()
	calls = mock.calls.CountInsertedObservations
	lockStorerMockCountInsertedObservations.RUnlock()
	return calls
}

// CreateCodeRelationship calls CreateCodeRelationshipFunc.
func (mock *StorerMock) CreateCodeRelationship(ctx context.Context, instance *model.Instance, codeListID string, code string) error {
	if mock.CreateCodeRelationshipFunc == nil {
		panic("StorerMock.CreateCodeRelationshipFunc: method is nil but Storer.CreateCodeRelationship was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Instance   *model.Instance
		CodeListID string
		Code       string
	}{
		Ctx:        ctx,
		Instance:   instance,
		CodeListID: codeListID,
		Code:       code,
	}
	lockStorerMockCreateCodeRelationship.Lock()
	mock.calls.CreateCodeRelationship = append(mock.calls.CreateCodeRelationship, callInfo)
	lockStorerMockCreateCodeRelationship.Unlock()
	return mock.CreateCodeRelationshipFunc(ctx, instance, codeListID, code)
}

// CreateCodeRelationshipCalls gets all the calls that were made to CreateCodeRelationship.
// Check the length with:
//     len(mockedStorer.CreateCodeRelationshipCalls())
func (mock *StorerMock) CreateCodeRelationshipCalls() []struct {
	Ctx        context.Context
	Instance   *model.Instance
	CodeListID string
	Code       string
} {
	var calls []struct {
		Ctx        context.Context
		Instance   *model.Instance
		CodeListID string
		Code       string
	}
	lockStorerMockCreateCodeRelationship.RLock()
	calls = mock.calls.CreateCodeRelationship
	lockStorerMockCreateCodeRelationship.RUnlock()
	return calls
}

// CreateInstance calls CreateInstanceFunc.
func (mock *StorerMock) CreateInstance(ctx context.Context, instance *model.Instance) error {
	if mock.CreateInstanceFunc == nil {
		panic("StorerMock.CreateInstanceFunc: method is nil but Storer.CreateInstance was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Instance *model.Instance
	}{
		Ctx:      ctx,
		Instance: instance,
	}
	lockStorerMockCreateInstance.Lock()
	mock.calls.CreateInstance = append(mock.calls.CreateInstance, callInfo)
	lockStorerMockCreateInstance.Unlock()
	return mock.CreateInstanceFunc(ctx, instance)
}

// CreateInstanceCalls gets all the calls that were made to CreateInstance.
// Check the length with:
//     len(mockedStorer.CreateInstanceCalls())
func (mock *StorerMock) CreateInstanceCalls() []struct {
	Ctx      context.Context
	Instance *model.Instance
} {
	var calls []struct {
		Ctx      context.Context
		Instance *model.Instance
	}
	lockStorerMockCreateInstance.RLock()
	calls = mock.calls.CreateInstance
	lockStorerMockCreateInstance.RUnlock()
	return calls
}

// CreateInstanceConstraint calls CreateInstanceConstraintFunc.
func (mock *StorerMock) CreateInstanceConstraint(ctx context.Context, instance *model.Instance) error {
	if mock.CreateInstanceConstraintFunc == nil {
		panic("StorerMock.CreateInstanceConstraintFunc: method is nil but Storer.CreateInstanceConstraint was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Instance *model.Instance
	}{
		Ctx:      ctx,
		Instance: instance,
	}
	lockStorerMockCreateInstanceConstraint.Lock()
	mock.calls.CreateInstanceConstraint = append(mock.calls.CreateInstanceConstraint, callInfo)
	lockStorerMockCreateInstanceConstraint.Unlock()
	return mock.CreateInstanceConstraintFunc(ctx, instance)
}

// CreateInstanceConstraintCalls gets all the calls that were made to CreateInstanceConstraint.
// Check the length with:
//     len(mockedStorer.CreateInstanceConstraintCalls())
func (mock *StorerMock) CreateInstanceConstraintCalls() []struct {
	Ctx      context.Context
	Instance *model.Instance
} {
	var calls []struct {
		Ctx      context.Context
		Instance *model.Instance
	}
	lockStorerMockCreateInstanceConstraint.RLock()
	calls = mock.calls.CreateInstanceConstraint
	lockStorerMockCreateInstanceConstraint.RUnlock()
	return calls
}

// InsertDimension calls InsertDimensionFunc.
func (mock *StorerMock) InsertDimension(ctx context.Context, cache map[string]string, instance *model.Instance, dimension *model.Dimension) (*model.Dimension, error) {
	if mock.InsertDimensionFunc == nil {
		panic("StorerMock.InsertDimensionFunc: method is nil but Storer.InsertDimension was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Cache     map[string]string
		Instance  *model.Instance
		Dimension *model.Dimension
	}{
		Ctx:       ctx,
		Cache:     cache,
		Instance:  instance,
		Dimension: dimension,
	}
	lockStorerMockInsertDimension.Lock()
	mock.calls.InsertDimension = append(mock.calls.InsertDimension, callInfo)
	lockStorerMockInsertDimension.Unlock()
	return mock.InsertDimensionFunc(ctx, cache, instance, dimension)
}

// InsertDimensionCalls gets all the calls that were made to InsertDimension.
// Check the length with:
//     len(mockedStorer.InsertDimensionCalls())
func (mock *StorerMock) InsertDimensionCalls() []struct {
	Ctx       context.Context
	Cache     map[string]string
	Instance  *model.Instance
	Dimension *model.Dimension
} {
	var calls []struct {
		Ctx       context.Context
		Cache     map[string]string
		Instance  *model.Instance
		Dimension *model.Dimension
	}
	lockStorerMockInsertDimension.RLock()
	calls = mock.calls.InsertDimension
	lockStorerMockInsertDimension.RUnlock()
	return calls
}

// InstanceExists calls InstanceExistsFunc.
func (mock *StorerMock) InstanceExists(ctx context.Context, instance *model.Instance) (bool, error) {
	if mock.InstanceExistsFunc == nil {
		panic("StorerMock.InstanceExistsFunc: method is nil but Storer.InstanceExists was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Instance *model.Instance
	}{
		Ctx:      ctx,
		Instance: instance,
	}
	lockStorerMockInstanceExists.Lock()
	mock.calls.InstanceExists = append(mock.calls.InstanceExists, callInfo)
	lockStorerMockInstanceExists.Unlock()
	return mock.InstanceExistsFunc(ctx, instance)
}

// InstanceExistsCalls gets all the calls that were made to InstanceExists.
// Check the length with:
//     len(mockedStorer.InstanceExistsCalls())
func (mock *StorerMock) InstanceExistsCalls() []struct {
	Ctx      context.Context
	Instance *model.Instance
} {
	var calls []struct {
		Ctx      context.Context
		Instance *model.Instance
	}
	lockStorerMockInstanceExists.RLock()
	calls = mock.calls.InstanceExists
	lockStorerMockInstanceExists.RUnlock()
	return calls
}

// SetInstanceIsPublished calls SetInstanceIsPublishedFunc.
func (mock *StorerMock) SetInstanceIsPublished(ctx context.Context, instanceID string) error {
	if mock.SetInstanceIsPublishedFunc == nil {
		panic("StorerMock.SetInstanceIsPublishedFunc: method is nil but Storer.SetInstanceIsPublished was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		InstanceID string
	}{
		Ctx:        ctx,
		InstanceID: instanceID,
	}
	lockStorerMockSetInstanceIsPublished.Lock()
	mock.calls.SetInstanceIsPublished = append(mock.calls.SetInstanceIsPublished, callInfo)
	lockStorerMockSetInstanceIsPublished.Unlock()
	return mock.SetInstanceIsPublishedFunc(ctx, instanceID)
}

// SetInstanceIsPublishedCalls gets all the calls that were made to SetInstanceIsPublished.
// Check the length with:
//     len(mockedStorer.SetInstanceIsPublishedCalls())
func (mock *StorerMock) SetInstanceIsPublishedCalls() []struct {
	Ctx        context.Context
	InstanceID string
} {
	var calls []struct {
		Ctx        context.Context
		InstanceID string
	}
	lockStorerMockSetInstanceIsPublished.RLock()
	calls = mock.calls.SetInstanceIsPublished
	lockStorerMockSetInstanceIsPublished.RUnlock()
	return calls
}
