// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/ONSdigital/dp-dimension-importer/common"
	"github.com/ONSdigital/golang-neo4j-bolt-driver"
	"sync"
)

var (
	lockNeo4jClientMockExecStmt sync.RWMutex
	lockNeo4jClientMockQuery    sync.RWMutex
)

// Neo4jClientMock is a mock implementation of Neo4jClient.
//
//     func TestSomethingThatUsesNeo4jClient(t *testing.T) {
//
//         // make and configure a mocked Neo4jClient
//         mockedNeo4jClient := &Neo4jClientMock{
//             ExecStmtFunc: func(conn golangNeo4jBoltDriver.Conn, query string, params map[string]interface{}) (golangNeo4jBoltDriver.Result, error) {
// 	               panic("TODO: mock out the ExecStmt method")
//             },
//             QueryFunc: func(conn golangNeo4jBoltDriver.Conn, query string, params map[string]interface{}) (*common.NeoRows, error) {
// 	               panic("TODO: mock out the Query method")
//             },
//         }
//
//         // TODO: use mockedNeo4jClient in code that requires Neo4jClient
//         //       and then make assertions.
//
//     }
type Neo4jClientMock struct {
	// ExecStmtFunc mocks the ExecStmt method.
	ExecStmtFunc func(conn golangNeo4jBoltDriver.Conn, query string, params map[string]interface{}) (golangNeo4jBoltDriver.Result, error)

	// QueryFunc mocks the Query method.
	QueryFunc func(conn golangNeo4jBoltDriver.Conn, query string, params map[string]interface{}) (*common.NeoRows, error)

	// calls tracks calls to the methods.
	calls struct {
		// ExecStmt holds details about calls to the ExecStmt method.
		ExecStmt []struct {
			// Conn is the conn argument value.
			Conn golangNeo4jBoltDriver.Conn
			// Query is the query argument value.
			Query string
			// Params is the params argument value.
			Params map[string]interface{}
		}
		// Query holds details about calls to the Query method.
		Query []struct {
			// Conn is the conn argument value.
			Conn golangNeo4jBoltDriver.Conn
			// Query is the query argument value.
			Query string
			// Params is the params argument value.
			Params map[string]interface{}
		}
	}
}

// ExecStmt calls ExecStmtFunc.
func (mock *Neo4jClientMock) ExecStmt(conn golangNeo4jBoltDriver.Conn, query string, params map[string]interface{}) (golangNeo4jBoltDriver.Result, error) {
	if mock.ExecStmtFunc == nil {
		panic("Neo4jClientMock.ExecStmtFunc: method is nil but Neo4jClient.ExecStmt was just called")
	}
	callInfo := struct {
		Conn   golangNeo4jBoltDriver.Conn
		Query  string
		Params map[string]interface{}
	}{
		Conn:   conn,
		Query:  query,
		Params: params,
	}
	lockNeo4jClientMockExecStmt.Lock()
	mock.calls.ExecStmt = append(mock.calls.ExecStmt, callInfo)
	lockNeo4jClientMockExecStmt.Unlock()
	return mock.ExecStmtFunc(conn, query, params)
}

// ExecStmtCalls gets all the calls that were made to ExecStmt.
// Check the length with:
//     len(mockedNeo4jClient.ExecStmtCalls())
func (mock *Neo4jClientMock) ExecStmtCalls() []struct {
	Conn   golangNeo4jBoltDriver.Conn
	Query  string
	Params map[string]interface{}
} {
	var calls []struct {
		Conn   golangNeo4jBoltDriver.Conn
		Query  string
		Params map[string]interface{}
	}
	lockNeo4jClientMockExecStmt.RLock()
	calls = mock.calls.ExecStmt
	lockNeo4jClientMockExecStmt.RUnlock()
	return calls
}

// Query calls QueryFunc.
func (mock *Neo4jClientMock) Query(conn golangNeo4jBoltDriver.Conn, query string, params map[string]interface{}) (*common.NeoRows, error) {
	if mock.QueryFunc == nil {
		panic("Neo4jClientMock.QueryFunc: method is nil but Neo4jClient.Query was just called")
	}
	callInfo := struct {
		Conn   golangNeo4jBoltDriver.Conn
		Query  string
		Params map[string]interface{}
	}{
		Conn:   conn,
		Query:  query,
		Params: params,
	}
	lockNeo4jClientMockQuery.Lock()
	mock.calls.Query = append(mock.calls.Query, callInfo)
	lockNeo4jClientMockQuery.Unlock()
	return mock.QueryFunc(conn, query, params)
}

// QueryCalls gets all the calls that were made to Query.
// Check the length with:
//     len(mockedNeo4jClient.QueryCalls())
func (mock *Neo4jClientMock) QueryCalls() []struct {
	Conn   golangNeo4jBoltDriver.Conn
	Query  string
	Params map[string]interface{}
} {
	var calls []struct {
		Conn   golangNeo4jBoltDriver.Conn
		Query  string
		Params map[string]interface{}
	}
	lockNeo4jClientMockQuery.RLock()
	calls = mock.calls.Query
	lockNeo4jClientMockQuery.RUnlock()
	return calls
}
