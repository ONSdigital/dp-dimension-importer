// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package mocks

import (
	"github.com/ONSdigital/dp-dimension-importer/event"
	"github.com/ONSdigital/dp-dimension-importer/model"
	"sync"
)

var (
	lockDatasetAPIClientMockGetDimensions      sync.RWMutex
	lockDatasetAPIClientMockGetInstance        sync.RWMutex
	lockDatasetAPIClientMockPutDimensionNodeID sync.RWMutex
)

// DatasetAPIClientMock is a mock implementation of DatasetAPIClient.
//
//     func TestSomethingThatUsesDatasetAPIClient(t *testing.T) {
//
//         // make and configure a mocked DatasetAPIClient
//         mockedDatasetAPIClient := &DatasetAPIClientMock{
//             GetDimensionsFunc: func(instanceID string) ([]*model.Dimension, error) {
// 	               panic("TODO: mock out the GetDimensions method")
//             },
//             GetInstanceFunc: func(instanceID string) (*model.Instance, error) {
// 	               panic("TODO: mock out the GetInstance method")
//             },
//             PutDimensionNodeIDFunc: func(instanceID string, dimension *model.Dimension) error {
// 	               panic("TODO: mock out the PutDimensionNodeID method")
//             },
//         }
//
//         // TODO: use mockedDatasetAPIClient in code that requires DatasetAPIClient
//         //       and then make assertions.
//
//     }
type DatasetAPIClientMock struct {
	// GetDimensionsFunc mocks the GetDimensions method.
	GetDimensionsFunc func(instanceID string) ([]*model.Dimension, error)

	// GetInstanceFunc mocks the GetInstance method.
	GetInstanceFunc func(instanceID string) (*model.Instance, error)

	// PutDimensionNodeIDFunc mocks the PutDimensionNodeID method.
	PutDimensionNodeIDFunc func(instanceID string, dimension *model.Dimension) error

	// calls tracks calls to the methods.
	calls struct {
		// GetDimensions holds details about calls to the GetDimensions method.
		GetDimensions []struct {
			// InstanceID is the instanceID argument value.
			InstanceID string
		}
		// GetInstance holds details about calls to the GetInstance method.
		GetInstance []struct {
			// InstanceID is the instanceID argument value.
			InstanceID string
		}
		// PutDimensionNodeID holds details about calls to the PutDimensionNodeID method.
		PutDimensionNodeID []struct {
			// InstanceID is the instanceID argument value.
			InstanceID string
			// Dimension is the dimension argument value.
			Dimension *model.Dimension
		}
	}
}

// GetDimensions calls GetDimensionsFunc.
func (mock *DatasetAPIClientMock) GetDimensions(instanceID string) ([]*model.Dimension, error) {
	if mock.GetDimensionsFunc == nil {
		panic("moq: DatasetAPIClientMock.GetDimensionsFunc is nil but DatasetAPIClient.GetDimensions was just called")
	}
	callInfo := struct {
		InstanceID string
	}{
		InstanceID: instanceID,
	}
	lockDatasetAPIClientMockGetDimensions.Lock()
	mock.calls.GetDimensions = append(mock.calls.GetDimensions, callInfo)
	lockDatasetAPIClientMockGetDimensions.Unlock()
	return mock.GetDimensionsFunc(instanceID)
}

// GetDimensionsCalls gets all the calls that were made to GetDimensions.
// Check the length with:
//     len(mockedDatasetAPIClient.GetDimensionsCalls())
func (mock *DatasetAPIClientMock) GetDimensionsCalls() []struct {
	InstanceID string
} {
	var calls []struct {
		InstanceID string
	}
	lockDatasetAPIClientMockGetDimensions.RLock()
	calls = mock.calls.GetDimensions
	lockDatasetAPIClientMockGetDimensions.RUnlock()
	return calls
}

// GetInstance calls GetInstanceFunc.
func (mock *DatasetAPIClientMock) GetInstance(instanceID string) (*model.Instance, error) {
	if mock.GetInstanceFunc == nil {
		panic("moq: DatasetAPIClientMock.GetInstanceFunc is nil but DatasetAPIClient.GetInstance was just called")
	}
	callInfo := struct {
		InstanceID string
	}{
		InstanceID: instanceID,
	}
	lockDatasetAPIClientMockGetInstance.Lock()
	mock.calls.GetInstance = append(mock.calls.GetInstance, callInfo)
	lockDatasetAPIClientMockGetInstance.Unlock()
	return mock.GetInstanceFunc(instanceID)
}

// GetInstanceCalls gets all the calls that were made to GetInstance.
// Check the length with:
//     len(mockedDatasetAPIClient.GetInstanceCalls())
func (mock *DatasetAPIClientMock) GetInstanceCalls() []struct {
	InstanceID string
} {
	var calls []struct {
		InstanceID string
	}
	lockDatasetAPIClientMockGetInstance.RLock()
	calls = mock.calls.GetInstance
	lockDatasetAPIClientMockGetInstance.RUnlock()
	return calls
}

// PutDimensionNodeID calls PutDimensionNodeIDFunc.
func (mock *DatasetAPIClientMock) PutDimensionNodeID(instanceID string, dimension *model.Dimension) error {
	if mock.PutDimensionNodeIDFunc == nil {
		panic("moq: DatasetAPIClientMock.PutDimensionNodeIDFunc is nil but DatasetAPIClient.PutDimensionNodeID was just called")
	}
	callInfo := struct {
		InstanceID string
		Dimension  *model.Dimension
	}{
		InstanceID: instanceID,
		Dimension:  dimension,
	}
	lockDatasetAPIClientMockPutDimensionNodeID.Lock()
	mock.calls.PutDimensionNodeID = append(mock.calls.PutDimensionNodeID, callInfo)
	lockDatasetAPIClientMockPutDimensionNodeID.Unlock()
	return mock.PutDimensionNodeIDFunc(instanceID, dimension)
}

// PutDimensionNodeIDCalls gets all the calls that were made to PutDimensionNodeID.
// Check the length with:
//     len(mockedDatasetAPIClient.PutDimensionNodeIDCalls())
func (mock *DatasetAPIClientMock) PutDimensionNodeIDCalls() []struct {
	InstanceID string
	Dimension  *model.Dimension
} {
	var calls []struct {
		InstanceID string
		Dimension  *model.Dimension
	}
	lockDatasetAPIClientMockPutDimensionNodeID.RLock()
	calls = mock.calls.PutDimensionNodeID
	lockDatasetAPIClientMockPutDimensionNodeID.RUnlock()
	return calls
}

var (
	lockInstanceRepositoryMockAddDimensions sync.RWMutex
	lockInstanceRepositoryMockCreate        sync.RWMutex
)

// InstanceRepositoryMock is a mock implementation of InstanceRepository.
//
//     func TestSomethingThatUsesInstanceRepository(t *testing.T) {
//
//         // make and configure a mocked InstanceRepository
//         mockedInstanceRepository := &InstanceRepositoryMock{
//             AddDimensionsFunc: func(instance *model.Instance) error {
// 	               panic("TODO: mock out the AddDimensions method")
//             },
//             CreateFunc: func(instance *model.Instance) error {
// 	               panic("TODO: mock out the Create method")
//             },
//         }
//
//         // TODO: use mockedInstanceRepository in code that requires InstanceRepository
//         //       and then make assertions.
//
//     }
type InstanceRepositoryMock struct {
	// AddDimensionsFunc mocks the AddDimensions method.
	AddDimensionsFunc func(instance *model.Instance) error

	// CreateFunc mocks the Create method.
	CreateFunc func(instance *model.Instance) error

	// calls tracks calls to the methods.
	calls struct {
		// AddDimensions holds details about calls to the AddDimensions method.
		AddDimensions []struct {
			// Instance is the instance argument value.
			Instance *model.Instance
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// Instance is the instance argument value.
			Instance *model.Instance
		}
	}
}

// AddDimensions calls AddDimensionsFunc.
func (mock *InstanceRepositoryMock) AddDimensions(instance *model.Instance) error {
	if mock.AddDimensionsFunc == nil {
		panic("moq: InstanceRepositoryMock.AddDimensionsFunc is nil but InstanceRepository.AddDimensions was just called")
	}
	callInfo := struct {
		Instance *model.Instance
	}{
		Instance: instance,
	}
	lockInstanceRepositoryMockAddDimensions.Lock()
	mock.calls.AddDimensions = append(mock.calls.AddDimensions, callInfo)
	lockInstanceRepositoryMockAddDimensions.Unlock()
	return mock.AddDimensionsFunc(instance)
}

// AddDimensionsCalls gets all the calls that were made to AddDimensions.
// Check the length with:
//     len(mockedInstanceRepository.AddDimensionsCalls())
func (mock *InstanceRepositoryMock) AddDimensionsCalls() []struct {
	Instance *model.Instance
} {
	var calls []struct {
		Instance *model.Instance
	}
	lockInstanceRepositoryMockAddDimensions.RLock()
	calls = mock.calls.AddDimensions
	lockInstanceRepositoryMockAddDimensions.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *InstanceRepositoryMock) Create(instance *model.Instance) error {
	if mock.CreateFunc == nil {
		panic("moq: InstanceRepositoryMock.CreateFunc is nil but InstanceRepository.Create was just called")
	}
	callInfo := struct {
		Instance *model.Instance
	}{
		Instance: instance,
	}
	lockInstanceRepositoryMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockInstanceRepositoryMockCreate.Unlock()
	return mock.CreateFunc(instance)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedInstanceRepository.CreateCalls())
func (mock *InstanceRepositoryMock) CreateCalls() []struct {
	Instance *model.Instance
} {
	var calls []struct {
		Instance *model.Instance
	}
	lockInstanceRepositoryMockCreate.RLock()
	calls = mock.calls.Create
	lockInstanceRepositoryMockCreate.RUnlock()
	return calls
}

var (
	lockDimensionRepositoryMockInsert sync.RWMutex
)

// DimensionRepositoryMock is a mock implementation of DimensionRepository.
//
//     func TestSomethingThatUsesDimensionRepository(t *testing.T) {
//
//         // make and configure a mocked DimensionRepository
//         mockedDimensionRepository := &DimensionRepositoryMock{
//             InsertFunc: func(instance *model.Instance, dimension *model.Dimension) (*model.Dimension, error) {
// 	               panic("TODO: mock out the Insert method")
//             },
//         }
//
//         // TODO: use mockedDimensionRepository in code that requires DimensionRepository
//         //       and then make assertions.
//
//     }
type DimensionRepositoryMock struct {
	// InsertFunc mocks the Insert method.
	InsertFunc func(instance *model.Instance, dimension *model.Dimension) (*model.Dimension, error)

	// calls tracks calls to the methods.
	calls struct {
		// Insert holds details about calls to the Insert method.
		Insert []struct {
			// Instance is the instance argument value.
			Instance *model.Instance
			// Dimension is the dimension argument value.
			Dimension *model.Dimension
		}
	}
}

// Insert calls InsertFunc.
func (mock *DimensionRepositoryMock) Insert(instance *model.Instance, dimension *model.Dimension) (*model.Dimension, error) {
	if mock.InsertFunc == nil {
		panic("moq: DimensionRepositoryMock.InsertFunc is nil but DimensionRepository.Insert was just called")
	}
	callInfo := struct {
		Instance  *model.Instance
		Dimension *model.Dimension
	}{
		Instance:  instance,
		Dimension: dimension,
	}
	lockDimensionRepositoryMockInsert.Lock()
	mock.calls.Insert = append(mock.calls.Insert, callInfo)
	lockDimensionRepositoryMockInsert.Unlock()
	return mock.InsertFunc(instance, dimension)
}

// InsertCalls gets all the calls that were made to Insert.
// Check the length with:
//     len(mockedDimensionRepository.InsertCalls())
func (mock *DimensionRepositoryMock) InsertCalls() []struct {
	Instance  *model.Instance
	Dimension *model.Dimension
} {
	var calls []struct {
		Instance  *model.Instance
		Dimension *model.Dimension
	}
	lockDimensionRepositoryMockInsert.RLock()
	calls = mock.calls.Insert
	lockDimensionRepositoryMockInsert.RUnlock()
	return calls
}

var (
	lockCompletedProducerMockCompleted sync.RWMutex
)

// CompletedProducerMock is a mock implementation of CompletedProducer.
//
//     func TestSomethingThatUsesCompletedProducer(t *testing.T) {
//
//         // make and configure a mocked CompletedProducer
//         mockedCompletedProducer := &CompletedProducerMock{
//             CompletedFunc: func(e event.InstanceCompleted) error {
// 	               panic("TODO: mock out the Completed method")
//             },
//         }
//
//         // TODO: use mockedCompletedProducer in code that requires CompletedProducer
//         //       and then make assertions.
//
//     }
type CompletedProducerMock struct {
	// CompletedFunc mocks the Completed method.
	CompletedFunc func(e event.InstanceCompleted) error

	// calls tracks calls to the methods.
	calls struct {
		// Completed holds details about calls to the Completed method.
		Completed []struct {
			// E is the e argument value.
			E event.InstanceCompleted
		}
	}
}

// Completed calls CompletedFunc.
func (mock *CompletedProducerMock) Completed(e event.InstanceCompleted) error {
	if mock.CompletedFunc == nil {
		panic("moq: CompletedProducerMock.CompletedFunc is nil but CompletedProducer.Completed was just called")
	}
	callInfo := struct {
		E event.InstanceCompleted
	}{
		E: e,
	}
	lockCompletedProducerMockCompleted.Lock()
	mock.calls.Completed = append(mock.calls.Completed, callInfo)
	lockCompletedProducerMockCompleted.Unlock()
	return mock.CompletedFunc(e)
}

// CompletedCalls gets all the calls that were made to Completed.
// Check the length with:
//     len(mockedCompletedProducer.CompletedCalls())
func (mock *CompletedProducerMock) CompletedCalls() []struct {
	E event.InstanceCompleted
} {
	var calls []struct {
		E event.InstanceCompleted
	}
	lockCompletedProducerMockCompleted.RLock()
	calls = mock.calls.Completed
	lockCompletedProducerMockCompleted.RUnlock()
	return calls
}
