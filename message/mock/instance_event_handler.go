// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-dimension-importer/event"
	"github.com/ONSdigital/dp-dimension-importer/message"
	"sync"
)

// Ensure, that InstanceEventHandlerMock does implement message.InstanceEventHandler.
// If this is not the case, regenerate this file with moq.
var _ message.InstanceEventHandler = &InstanceEventHandlerMock{}

// InstanceEventHandlerMock is a mock implementation of message.InstanceEventHandler.
//
//     func TestSomethingThatUsesInstanceEventHandler(t *testing.T) {
//
//         // make and configure a mocked message.InstanceEventHandler
//         mockedInstanceEventHandler := &InstanceEventHandlerMock{
//             HandleFunc: func(ctx context.Context, e event.NewInstance) error {
// 	               panic("mock out the Handle method")
//             },
//         }
//
//         // use mockedInstanceEventHandler in code that requires message.InstanceEventHandler
//         // and then make assertions.
//
//     }
type InstanceEventHandlerMock struct {
	// HandleFunc mocks the Handle method.
	HandleFunc func(ctx context.Context, e event.NewInstance) error

	// calls tracks calls to the methods.
	calls struct {
		// Handle holds details about calls to the Handle method.
		Handle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// E is the e argument value.
			E event.NewInstance
		}
	}
	lockHandle sync.RWMutex
}

// Handle calls HandleFunc.
func (mock *InstanceEventHandlerMock) Handle(ctx context.Context, e event.NewInstance) error {
	if mock.HandleFunc == nil {
		panic("InstanceEventHandlerMock.HandleFunc: method is nil but InstanceEventHandler.Handle was just called")
	}
	callInfo := struct {
		Ctx context.Context
		E   event.NewInstance
	}{
		Ctx: ctx,
		E:   e,
	}
	mock.lockHandle.Lock()
	mock.calls.Handle = append(mock.calls.Handle, callInfo)
	mock.lockHandle.Unlock()
	return mock.HandleFunc(ctx, e)
}

// HandleCalls gets all the calls that were made to Handle.
// Check the length with:
//     len(mockedInstanceEventHandler.HandleCalls())
func (mock *InstanceEventHandlerMock) HandleCalls() []struct {
	Ctx context.Context
	E   event.NewInstance
} {
	var calls []struct {
		Ctx context.Context
		E   event.NewInstance
	}
	mock.lockHandle.RLock()
	calls = mock.calls.Handle
	mock.lockHandle.RUnlock()
	return calls
}
