// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/ONSdigital/dp-dimension-importer/message"
	"github.com/ONSdigital/dp-kafka/v2"
	"sync"
)

// Ensure, that ReceiverMock does implement message.Receiver.
// If this is not the case, regenerate this file with moq.
var _ message.Receiver = &ReceiverMock{}

// ReceiverMock is a mock implementation of message.Receiver.
//
//     func TestSomethingThatUsesReceiver(t *testing.T) {
//
//         // make and configure a mocked message.Receiver
//         mockedReceiver := &ReceiverMock{
//             OnMessageFunc: func(message kafka.Message)  {
// 	               panic("mock out the OnMessage method")
//             },
//         }
//
//         // use mockedReceiver in code that requires message.Receiver
//         // and then make assertions.
//
//     }
type ReceiverMock struct {
	// OnMessageFunc mocks the OnMessage method.
	OnMessageFunc func(message kafka.Message)

	// calls tracks calls to the methods.
	calls struct {
		// OnMessage holds details about calls to the OnMessage method.
		OnMessage []struct {
			// Message is the message argument value.
			Message kafka.Message
		}
	}
	lockOnMessage sync.RWMutex
}

// OnMessage calls OnMessageFunc.
func (mock *ReceiverMock) OnMessage(message kafka.Message) {
	if mock.OnMessageFunc == nil {
		panic("ReceiverMock.OnMessageFunc: method is nil but Receiver.OnMessage was just called")
	}
	callInfo := struct {
		Message kafka.Message
	}{
		Message: message,
	}
	mock.lockOnMessage.Lock()
	mock.calls.OnMessage = append(mock.calls.OnMessage, callInfo)
	mock.lockOnMessage.Unlock()
	mock.OnMessageFunc(message)
}

// OnMessageCalls gets all the calls that were made to OnMessage.
// Check the length with:
//     len(mockedReceiver.OnMessageCalls())
func (mock *ReceiverMock) OnMessageCalls() []struct {
	Message kafka.Message
} {
	var calls []struct {
		Message kafka.Message
	}
	mock.lockOnMessage.RLock()
	calls = mock.calls.OnMessage
	mock.lockOnMessage.RUnlock()
	return calls
}
